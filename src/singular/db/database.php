<?php	/**	* Singular's Database	*/	namespace Singular;	/**	* Singular's Database Class	*/	class Database {		/** @var Object|null $provider Database's provider. */		private $provider = NULL;		/** @var Object|null $_con Database's connection. */		private static $_con = NULL;		/**      * Constructor      *      * @param string $provider Provider class name.			* @param string $server Database server.			* @param string $user Database user account.			* @param string $password Database password.			* @param string $data_base Database name.      *      * @return void      */		public function __construct($provider, $server, $user, $password, $data_base) {			if (!class_exists($provider)) {				throw new \Exception("Provider does not exist or is not implemented.");			}			$this->provider = new $provider;			$this->provider->connect($server, $user, $password, $data_base);			if (!$this->provider->is_there_connection()) {				throw new \Exception("Connection to dabase '$data_base' cannot be established.");			}			else {				$this->provider->set_charset('utf-8');			}		}		/**      * Returns the existing database connection or establishes a new one.      *      * @param string $provider Provider class name.			* @param string $server Database server.			* @param string $user Database user account.			* @param string $password Database password.			* @param string $data_base Database name.      *      * @return Object      */		public static function get_connection($provider, $server, $user, $password, $data_base) {			if (self::$_con) {				return self::$_con;			}			else {				$class = __CLASS__;				self::$_con = new $class($provider, $server, $user, $password, $data_base);				return self::$_con;			}		}		/**      * Returns the query of a model.      *      * @param Model $model Model instance.      *      * @return string      */		public function get_query($model) {			return $this->provider->get_query($model);		}		/**      * Returns the number of occurrences for a condition and a model.      *      * @param Model $model Model instance.			* @param Array $condition Condition to query.      *      * @return integer      */		public function get_count($model, $condition = NULL) {			return $this->provider->get_count($model, $condition);		}		/**      * Returns the query of a model for a condition.      *      * @param Model $model Model instance.			* @param Array $condition Condition to query.      *      * @return string      */		public function get_query_by_condition($model, $condition) {			return $this->provider->get_query_by_condition($model, $condition);		}		/**      * Returns the query of a model for a key-value pair.      *      * @param Model $model Model instance.			* @param string $field Field's name.			* @param string $field Field's value.      *      * @return string      */		public function get_query_by_value($model, $field, $value) {			return $this->provider->get_query_by_value($model, $field, $value);		}		/**      * Returns the filter of a model.      *      * @param Model $model Model instance.      *      * @return string      */		public function get_filter($model) {			return $this->provider->get_filter($model);		}		/**      * Returns the default filter of a model.      *      * @param Model $model Model instance.      *      * @return string      */		public function get_default_filter() {			return $this->provider->get_default_filter();		}		/**      * Returns the order criteria of a model.      *      * @param Model $model Model instance.      *      * @return string      */		public function get_order($model) {			return $this->provider->get_order($model);		}		/**      * Returns the update query of a model.      *      * @param Model $model Model instance.			* @param Array $columns Columns to update.			* @param string $id Register identifier.      *      * @return string      */		public function get_update($table, $columns, $id) {			return $this->provider->get_update($table, $columns, $id);		}		/**      * Returns the insert query of a model.      *      * @param Model $model Model instance.			* @param Array $columns Columns to update.      *      * @return string      */		public function get_insert($table, $columns) {			return $this->provider->get_insert($table, $columns);		}		/**      * Returns the delete query of a table.      *      * @param string $table Model table.			* @param string $id Register identifier.      *      * @return string      */		public function get_delete($table, $id) {			return $this->provider->get_delete($table, $id);		}		/**      * Returns the delete query of a table.      *      * @param string $table Model table.			* @param string $condition Register identifier.      *      * @return string      */		public function get_delete_by_condition($table, $condition) {			return $this->provider->get_delete_by_condition($table, $condition);		}		/**      * Replaces the parameters of a query.      *      * @return Object      */		private function replace_parameters() {			if (empty($this->params)) {				return NULL;			}			$b = current($this->params);			next($this->params);			return $b;		}		/**      * Prepares a query to be run.      *      * @param string $sql Query to execute.			* @param string $parameters Parameters to replace in the query.      *      * @return string      */		private function prepare($sql, $parameters) {			$escaped = '';			if ($parameters) {				foreach ($parameters as $key => $value) {					if (is_bool($value)) {						$value = $value ? 1 : 0;					}					else if (is_double($value)) {						$value = str_replace(',', '.', $value);					}					else if (is_numeric($value)) {						if (is_string($value)) {							$value = "'" . $this->provider->escape($value) . "'";						}						else {							$value = $this->provider->escape($value);						}					}					else if (is_NULL($value)) {						$value = $this->provider->get_null();					}					else {						$value = "'" . $this->provider->escape($value) . "'";					}					$escaped[] = $value;				}			}			$this->params = $escaped;			$q = preg_replace_callback("/(\?)/i", array($this, "replace_parameters"), $sql);			return $q;		}		/**      * Runs a query.      *      * @param string $q Query to execute.			* @param string $parameters Parameters to replace in the query.      *      * @return Array      */		private function send_query($q, $parameters) {			$query = $this->prepare($q, $parameters);			$result = $this->provider->query($query);			if ($this->provider->get_error_number()) {				error_log($this->provider->get_error());			}			return $result;		}		/**      * Runs a query that returns a scalar.      *      * @param string $q Query to execute.			* @param string $parameters Parameters to replace in the query.      *      * @return Object      */		public function run_scalar($q, $parameters = NULL) {			$result = $this->send_query($q, $parameters);			if (!is_NULL($result)) {				if (!is_object($result)) {					return $result;				}				else {					$row = $this->provider->get_array($result);					return $row[0];				}			}			return NULL;		}		/**      * Runs a query.      *      * @param string $q Query to execute.			* @param string $parameters Parameters to replace in the query.      *      * @return Array      */		public function run($q, $indice = NULL, $parameters = NULL) {			$result = $this->send_query($q, $parameters);			if ((is_object($result) || $this->provider->number_of_rows($result) || $result) && ($result !== TRUE && $result !== FALSE)) {					$arr = array();					while ($row = $this->provider->get_array($result)) {							if ($indice) {									$arr[$row[$indice]] = $row;							}							else {									$arr[] = $row;							}					}					return $arr;			}			return $this->provider->get_error_number() ? FALSE : TRUE;		}		/**      * Changes the currect database.      *      * @param string $database Database's name.      *      * @return void      */		public function change_database($database) {			$this->provider->change_database($database);		}		/**      * Gets the last id.      *      * @return string      */		public function get_id() {			return $this->provider->get_id();		}		/**      * Gets the thrown error.      *      * @return Object      */		public function get_error() {			return $this->provider->get_error();		}		/**      * Formats data according to a field structure.      *      * @param Array $data Data to format.			* @param Array $fields_structure Field structure to follow.      *      * @return Array      */		public function format_fields($data, $fields_structure) {			return $this->provider->format_fields($data, $fields_structure);		}		/**      * Checks the existance of a table and creates it if necessary.      *      * @param string $table Table to check.			* @param Array $fields Table fields.			* @param string $primary_key Table primary key.      *      * @return Object      */		public function check_table($table, $fields, $primary_key) {			return $this->provider->check_table($table, $fields, $primary_key);		}		/**      * Checks the existance of one table fields and creates them if necessary.      *      * @param string $table Table to check.			* @param Array $fields Table fields.			* @param string $primary_key Table primary key.      *      * @return Object      */		public function check_fields($table, $fields, $primary_key) {			return $this->provider->check_fields($table, $fields, $primary_key);		}		/**      * Destructor.      *      * @return void      */		public function __destruct() {			$this->provider->disconnect();		}	}