<?php return function ($in, $debugopt = 1) {
    $cx = array(
        'flags' => array(
            'jstrue' => false,
            'jsobj' => false,
            'spvar' => true,
            'prop' => false,
            'method' => false,
            'mustlok' => false,
            'echo' => false,
            'debug' => $debugopt,
        ),
        'constants' =>  array(
            'DEBUG_ERROR_LOG' => 1,
            'DEBUG_ERROR_EXCEPTION' => 2,
            'DEBUG_TAGS' => 4,
            'DEBUG_TAGS_ANSI' => 12,
            'DEBUG_TAGS_HTML' => 20,
        ),
        'helpers' => array(),
        'blockhelpers' => array(),
        'hbhelpers' => array(),
        'partials' => array('head' => function ($cx, $in, $sp) {return ''.$sp.'<meta charset="utf-8">
'.$sp.'<title>'.htmlentities((string)((isset($in['page']['title']) && is_array($in['page'])) ? $in['page']['title'] : null), ENT_QUOTES, 'UTF-8').'</title>
'.$sp.'<meta name="viewport" content="width=device-width, user-scalable=no">
'.$sp.'<link href=\'https://fonts.googleapis.com/css?family=Lato:400,100,300,300italic|Indie+Flower|Raleway:400,300,100\' rel=\'stylesheet\' type=\'text/css\'>
'.$sp.'<link rel="stylesheet" href="'.htmlentities((string)((isset($in['page']['web']) && is_array($in['page'])) ? $in['page']['web'] : null), ENT_QUOTES, 'UTF-8').'/css/font-awesome.min.css" />
'.$sp.'<link rel="stylesheet" href="'.htmlentities((string)((isset($in['page']['web']) && is_array($in['page'])) ? $in['page']['web'] : null), ENT_QUOTES, 'UTF-8').'/css/estilo.css" />
';},'debug' => function ($cx, $in, $sp) {return ''.$sp.''.(($cx['funcs']['ifvar']($cx, ((isset($in['page']['debug']) && is_array($in['page'])) ? $in['page']['debug'] : null))) ? '<pre class="debug">
'.$sp.'  '.htmlentities((string)((isset($in['page']['debug']) && is_array($in['page'])) ? $in['page']['debug'] : null), ENT_QUOTES, 'UTF-8').'
'.$sp.'</pre>
'.$sp.'' : '').'';},'navigation' => function ($cx, $in, $sp) {return ''.$sp.'<nav class="navegacion">
'.$sp.'  <ul>
'.$sp.'    <li>
'.$sp.'      <a href="'.htmlentities((string)((isset($in['page']['host']) && is_array($in['page'])) ? $in['page']['host'] : null), ENT_QUOTES, 'UTF-8').'/cerrar_sesion">
'.$sp.'        Cerrar sesi√≥n
'.$sp.'        <i class="fa fa-power-off cerrar-sesion"></i>
'.$sp.'      </a>
'.$sp.'    </li>
'.$sp.'  </ul>
'.$sp.'</nav>
';},'cabecera' => function ($cx, $in, $sp) {return ''.$sp.'<header class="cabecera">
'.$sp.'  <h1>Mis notas</h1>
'.$sp.'  <h2 class="con-singular">con Singular</h2>
'.$sp.'</header>
';},'flash' => function ($cx, $in, $sp) {return ''.$sp.''.(($cx['funcs']['ifvar']($cx, ((isset($in['page']['flash']) && is_array($in['page'])) ? $in['page']['flash'] : null))) ? '<div class="flash">
'.$sp.'  '.htmlentities((string)((isset($in['page']['flash']) && is_array($in['page'])) ? $in['page']['flash'] : null), ENT_QUOTES, 'UTF-8').'
'.$sp.'</div>
'.$sp.'' : '').'';},'tabla-notas' => function ($cx, $in, $sp) {return ''.$sp.'<table class="tabla-notas">
'.$sp.'  <tbody>
'.$sp.''.$cx['funcs']['sec']($cx, ((isset($in['data']) && is_array($in)) ? $in['data'] : null), $in, false, function($cx, $in)use($sp){return '      <tr>
'.$sp.'        <td>
'.$sp.'          <form method="POST" action="'.htmlentities((string)((isset($cx['sp_vars']['root']['page']['host']) && is_array($cx['sp_vars']['root']['page'])) ? $cx['sp_vars']['root']['page']['host'] : null), ENT_QUOTES, 'UTF-8').'/notas/'.htmlentities((string)((isset($in['id']) && is_array($in)) ? $in['id'] : null), ENT_QUOTES, 'UTF-8').'/guardar">
'.$sp.'            <input type="text" value="'.htmlentities((string)((isset($in['mensaje']) && is_array($in)) ? $in['mensaje'] : null), ENT_QUOTES, 'UTF-8').'" class="campo-texto campo-texto-actualizacion" name="mensaje" />
'.$sp.'          </form>
'.$sp.'        </td>
'.$sp.'        <td>'.htmlentities((string)((isset($in['creacion']) && is_array($in)) ? $in['creacion'] : null), ENT_QUOTES, 'UTF-8').'</td>
'.$sp.'        <td class="acciones">
'.$sp.'          <a href="'.htmlentities((string)((isset($cx['sp_vars']['root']['page']['host']) && is_array($cx['sp_vars']['root']['page'])) ? $cx['sp_vars']['root']['page']['host'] : null), ENT_QUOTES, 'UTF-8').'/notas/'.htmlentities((string)((isset($in['id']) && is_array($in)) ? $in['id'] : null), ENT_QUOTES, 'UTF-8').'/borrar" class="btn-borrar">
'.$sp.'            <i class="fa fa-trash-o"></i>
'.$sp.'          </a>
'.$sp.'        </td>
'.$sp.'      </tr>
'.$sp.'';}).'  </tbody>
'.$sp.'</table>
'.$sp.'
'.$sp.'<script>
'.$sp.'  var notas = document.querySelectorAll(".campo-texto-actualizacion");
'.$sp.'  var notas_length = notas.length;
'.$sp.'
'.$sp.'  for (var i = 0; i < notas_length; i++) {
'.$sp.'    var nota = notas[i];
'.$sp.'
'.$sp.'    nota.onchange = function() {
'.$sp.'      this.parentNode.submit();
'.$sp.'    }
'.$sp.'  }
'.$sp.'</script>
';},'pie' => function ($cx, $in, $sp) {return ''.$sp.'<footer class="pie">
'.$sp.'  Un producto de
'.$sp.'  <a href="http://www.simbiosys.es/">
'.$sp.'    <img src="'.htmlentities((string)((isset($in['page']['web']) && is_array($in['page'])) ? $in['page']['web'] : null), ENT_QUOTES, 'UTF-8').'/img/simbiosys.png" class="logo-simbiosys" />
'.$sp.'  </a>
'.$sp.'</footer>
';},),
        'scopes' => array(),
        'sp_vars' => array('root' => $in),
        'lcrun' => 'LCRun3',
'funcs' => array(
    'ifvar' => function ($cx, $v) {
        return !is_null($v) && ($v !== false) && ($v !== 0) && ($v !== 0.0) && ($v !== '') && (is_array($v) ? (count($v) > 0) : true);
    },
    'sec' => function ($cx, $v, $in, $each, $cb, $else = null) {
        $isAry = is_array($v) || ($v instanceof ArrayObject);
        $isTrav = $v instanceof Traversable;
        $loop = $each;
        $keys = null;
        $last = null;
        $isObj = false;

        if ($isAry && $else !== null && count($v) === 0) {
            $cx['scopes'][] = $in;
            $ret = $else($cx, $in);
            array_pop($cx['scopes']);
            return $ret;
        }

        // #var, detect input type is object or not
        if (!$loop && $isAry) {
            $keys = array_keys($v);
            $loop = (count(array_diff_key($v, array_keys($keys))) == 0);
            $isObj = !$loop;
        }

        if (($loop && $isAry) || $isTrav) {
            if ($each && !$isTrav) {
                // Detect input type is object or not when never done once
                if ($keys == null) {
                    $keys = array_keys($v);
                    $isObj = (count(array_diff_key($v, array_keys($keys))) > 0);
                }
            }
            $ret = array();
            $cx['scopes'][] = $in;
            $i = 0;
            if ($cx['flags']['spvar']) {
                $old_spvar = $cx['sp_vars'];
                $cx['sp_vars'] = array(
                    '_parent' => $old_spvar,
                    'root' => $old_spvar['root'],
                );
                if (!$isTrav) {
                    $last = count($keys) - 1;
                }
            }
            foreach ($v as $index => $raw) {
                if ($cx['flags']['spvar']) {
                    $cx['sp_vars']['first'] = ($i === 0);
                    $cx['sp_vars']['last'] = ($i == $last);
                    $cx['sp_vars']['key'] = $index;
                    $cx['sp_vars']['index'] = $i;
                    $i++;
                }
                $ret[] = $cb($cx, $raw);
            }
            if ($cx['flags']['spvar']) {
                if ($isObj) {
                    unset($cx['sp_vars']['key']);
                } else {
                    unset($cx['sp_vars']['last']);
                }
                unset($cx['sp_vars']['index']);
                unset($cx['sp_vars']['first']);
                $cx['sp_vars'] = $old_spvar;
            }
            array_pop($cx['scopes']);
            return join('', $ret);
        }
        if ($each) {
            if ($else !== null) {
                $cx['scopes'][] = $in;
                $ret = $else($cx, $v);
                array_pop($cx['scopes']);
                return $ret;
            }
            return '';
        }
        if ($isAry) {
            $cx['scopes'][] = $in;
            $ret = $cb($cx, $v);
            array_pop($cx['scopes']);
            return $ret;
        }

        if ($v === true) {
            return $cb($cx, $in);
        }

        if (!is_null($v) && ($v !== false)) {
            return $cb($cx, $v);
        }

        if ($else !== null) {
            $cx['scopes'][] = $in;
            $ret = $else($cx, $in);
            array_pop($cx['scopes']);
            return $ret;
        }

        return '';
    },
    'p' => function ($cx, $p, $v, $sp = '') {
        $param = $v[0][0];

        if (is_array($v[1])) {
            if (is_array($v[0][0])) {
                $param = array_merge($v[0][0], $v[1]);
            } else if (($cx['flags']['method'] || $cx['flags']['prop']) && is_object($v[0][0])) {
                foreach ($v[1] as $i => $v) {
                    $param->$i = $v;
                }
            }
        }

        return call_user_func($cx['partials'][$p], $cx, $param, $sp);
    },
)

    );
    
    return '<!DOCTYPE HTML>
<html>
  <head>
'.$cx['funcs']['p']($cx, 'head', array(array($in),array()), '    ').'  </head>
  <body>
'.$cx['funcs']['p']($cx, 'debug', array(array($in),array()), '    ').'    <main class="cuerpo">
'.$cx['funcs']['p']($cx, 'navigation', array(array($in),array()), '      ').''.$cx['funcs']['p']($cx, 'cabecera', array(array($in),array()), '      ').''.$cx['funcs']['p']($cx, 'flash', array(array($in),array()), '      ').'      <section class="notas">
'.$cx['funcs']['p']($cx, 'tabla-notas', array(array($in),array()), '        ').'        <a href="'.htmlentities((string)((isset($in['page']['host']) && is_array($in['page'])) ? $in['page']['host'] : null), ENT_QUOTES, 'UTF-8').'/notas/nuevo" class="btn-nueva-nota">
          Nueva nota
          <i class="fa fa-pencil-square-o"></i>
        </a>
      </section>
    </main>
'.$cx['funcs']['p']($cx, 'pie', array(array($in),array()), '    ').'  </body>
</html>
';
}
?>